* Key concepts
** Load Balancer
** API Gateway
** Networking
*** HTTP vs HTTPS
*** TCP vs UDPA
*** URL vs URI vs URN
** DNS
** Caching
*** Key terminologies
1. Cache
2. Cache hit
3. Cache miss
4. Cache eviction
5. Cache staleness
*** Cache types
1. Client Side Cache
2. Load balancer Cache
3. API Gateway Cache
4. CDN Cache
5. Web Server Cache
6. Distributed File System Cache
7. App Server Cache
8. Distributed Cache for DB (Redis/Memcached)
9. Serach Index Cache
10. Coordination Service Cache
11. Database Cache
*** Cache Replacemant Policies
- LRU, LFU and FIFO
*** Cache Write Strategies
- Write Through, Write Back and Write Around
*** Cache Invalidation techniques
- Purge, Refresh, Ban, TTL and Stale-while-revalidate
*** Cache Read Strategies
- Read Through and Read Aside
*** Cache Consistnecy
- Strong, weak and eventual consistency
*** Cache Performance Metrics
- Hit rate
- Miss rate
- Cache size
- Cache latency
** CDN
*** Definition
A CDN is a network of proxy servers to cache website content present in multiple locations.
*** Key terminologies
1. Point of Presence
2. Edge Server
3. Origin Server
4. Cache Warming
5. TTL
6. Anycast
7. Content Invalidation
8. Cache Purging
*** CDN Routing
1. Anycast routing
2. DNS based routing
3. Geo-IP based routing
*** CDN Types
- Push and Pull CDN
** Data Partitioning
*** Partitioning methods
- Horizontal, vertical and hybrid partitioning
*** Sharding techniques
1. Range-based
2. Hash-based
3. Directory-based
4. Geographical
5. Dynamic
6. Hybrid
** Proxies
** Redundancy and Replication
** CAP and PACELC Theorem
** Databases (SQL/NoSQL)
** Indexes
** Bloom Filters
** Long-Polling vs WebSockets vs Server-Sent Events
** Quorum
** Heartbeat
** Checksum
** Leader and Follower
** Distributed Messaging System
*** Types of messaging system
1. Messaging queue
2. Publish-subscribe messaging system
*** Benefits
1. Asynchronous communication
2. Load balancing
3. Fault Tolerance
4. Message delivery guarantee
5. Messaging buffering
6. Message Persistence
7. Scalability
*** Kafka
**** Key Characteristics (What)
- Publisher-subscriber system
- Distributed, durable, fault-tolerant and highly scalable
**** Use Cases (Why)
- Metrics or monitoring data aggregate
- Log aggregation
- Stream processing
- Commit log
- Product suggestions
**** Kakfa key terminologies (How)
- Brokers
- Records
- Topics
- Producers
- Consumers
- Kafka cluster
- Zookeeper
*** Kafka vs RabbitMQ vs ActiveMQ
- Perfomance and Scalability
- Message Ordering
- Message Priority
- Message Model Protocol
** Distributed File Systems
**** Key Characteristics (What)
- Replication
- Scalability
- Consistency
- Data Distribution
- Fault Tolerance
**** Use Cases (Why)
- Cloud file storage services
- Big Data Applications
- High-performance computing
**** Key components
- Client interface
- Metadata servers
- Storage nodes
- Replication and redundancy mechanism
- Load balancer
- Network infrastructure
- Fault tolerance and recovery mechanisms
- Security features
**** Examples
HDFS, GFS, Amazon EFS, Microsoft DFS
